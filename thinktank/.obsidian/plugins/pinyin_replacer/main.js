/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PinyinReplacer
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var PinyinReplacer = class extends import_obsidian.Plugin {
  async onload() {
    console.log("loading in pinyin replacer");
    const sBItem = this.addStatusBarItem().createEl("span");
    sBItem.createEl("span", { text: "\u0101 \xE1 \u01CE \xE0" });
    this.addCommand({
      id: "replace-first-tone",
      name: "Replace first tone",
      hotkeys: [{ modifiers: ["Alt"], key: "1" }],
      editorCallback: (editor, view) => {
        const lastChar = this.getCharacterBeforeCursor(editor);
        const vowelIndex = this.vowelToNumber(lastChar);
        if (vowelIndex !== -1) {
          const pinyingTone = this.findPinYingTone(0, vowelIndex);
          const cursorPos = editor.getCursor();
          if (cursorPos.ch) {
            editor.replaceRange(pinyingTone, { line: cursorPos.line, ch: cursorPos.ch - 1 }, cursorPos);
          } else {
            editor.replaceRange(pinyingTone, cursorPos, { line: cursorPos.line, ch: cursorPos.ch + 1 });
          }
        }
      }
    });
    this.addCommand({
      id: "replace-second-tone",
      name: "Replace second tone",
      hotkeys: [{ modifiers: ["Alt"], key: "2" }],
      editorCallback: (editor, view) => {
        const lastChar = this.getCharacterBeforeCursor(editor);
        const vowelIndex = this.vowelToNumber(lastChar);
        if (vowelIndex !== -1) {
          const pinyingTone = this.findPinYingTone(1, vowelIndex);
          const cursorPos = editor.getCursor();
          if (cursorPos.ch) {
            editor.replaceRange(pinyingTone, { line: cursorPos.line, ch: cursorPos.ch - 1 }, cursorPos);
          } else {
            editor.replaceRange(pinyingTone, cursorPos, { line: cursorPos.line, ch: cursorPos.ch + 1 });
          }
        }
      }
    });
    this.addCommand({
      id: "replace-third-tone",
      name: "Replace third tone",
      hotkeys: [{ modifiers: ["Alt"], key: "3" }],
      editorCallback: (editor, view) => {
        const lastChar = this.getCharacterBeforeCursor(editor);
        const vowelIndex = this.vowelToNumber(lastChar);
        if (vowelIndex !== -1) {
          const pinyingTone = this.findPinYingTone(2, vowelIndex);
          const cursorPos = editor.getCursor();
          if (cursorPos.ch) {
            editor.replaceRange(pinyingTone, { line: cursorPos.line, ch: cursorPos.ch - 1 }, cursorPos);
          } else {
            editor.replaceRange(pinyingTone, cursorPos, { line: cursorPos.line, ch: cursorPos.ch + 1 });
          }
        }
      }
    });
    this.addCommand({
      id: "replace-fourth-tone",
      name: "Replace fourth tone",
      hotkeys: [{ modifiers: ["Alt"], key: "4" }],
      editorCallback: (editor, view) => {
        const lastChar = this.getCharacterBeforeCursor(editor);
        const vowelIndex = this.vowelToNumber(lastChar);
        if (vowelIndex !== -1) {
          const pinyingTone = this.findPinYingTone(3, vowelIndex);
          const cursorPos = editor.getCursor();
          if (cursorPos.ch) {
            editor.replaceRange(pinyingTone, { line: cursorPos.line, ch: cursorPos.ch - 1 }, cursorPos);
          } else {
            editor.replaceRange(pinyingTone, cursorPos, { line: cursorPos.line, ch: cursorPos.ch + 1 });
          }
        }
      }
    });
  }
  async onunload() {
    console.log("unloading in pinyin replacer");
  }
  getCharacterBeforeCursor(editor) {
    const lines = editor.getValue().split(/\r\n|\n|\r/);
    const cursor = editor.getCursor();
    let lastChar;
    if (cursor.ch > 0) {
      lastChar = lines[cursor.line][cursor.ch - 1];
    } else {
      lastChar = lines[cursor.line][cursor.ch];
    }
    return lastChar;
  }
  vowelToNumber(vowel) {
    const vowels = ["a", "e", "i", "o", "u", "v"];
    const index = vowels.indexOf(vowel.toLowerCase());
    return index;
  }
  findPinYingTone(tone, vowelIndex) {
    const tones = [
      ["\u0101", "\xE1", "\u01CE", "\xE0"],
      ["\u0113", "\xE9", "\u011B", "\xE8"],
      ["\u012B", "\xED", "\u01D0", "\xEC"],
      ["\u014D", "\xF3", "\u01D2", "\xF2"],
      ["\u016B", "\xFA", "\u01D4", "\xF9"],
      ["\u01D6", "\u01D8", "\u01DA", "\u01DC"]
    ];
    return tones[vowelIndex][tone];
  }
};


/* nosourcemap */